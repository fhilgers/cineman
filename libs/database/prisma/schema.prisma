generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ticket {
  id         String   @id @default(uuid()) @db.Uuid
  price      Int
  ownerId    String   @db.Uuid
  owner      Customer @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  seatId     String   @db.Uuid
  seat       Seat     @relation(fields: [seatId], references: [id], onDelete: Cascade)
  showId     String   @db.Uuid
  show       Show     @relation(fields: [showId], references: [id], onDelete: Cascade)

  @@unique([seatId, showId])
}

model Customer {
  id      String   @id @default(uuid()) @db.Uuid
  name    String
  address String
  Rating  Rating[]
  tickets Ticket[]
  userId  String   @unique @db.Uuid 
  user    User     @relation(fields: [userId], references: [id])
}

model Movie {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String   @default("")
  duration    DateTime
  age         Int      @default(0)
  rating      Rating[]
  show        Show[]
}

model Rating {
  id         String   @id @default(uuid()) @db.Uuid
  // TODO min / max
  stars      Float
  review     String
  customerId String   @db.Uuid
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  movieId    String   @db.Uuid
  movie      Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([customerId, movieId])
}

model Show {
  id        String   @id @default(uuid()) @db.Uuid
  theaterId String   @db.Uuid
  movieId   String   @db.Uuid
  start     DateTime
  end       DateTime
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  theater   Theater  @relation(fields: [theaterId], references: [id], onDelete: Cascade)
  tickets   Ticket[]

  // CREATE EXTENSION btree_gist;
  // ALTER TABLE "Show" ADD EXCLUDE USING GIST ("theaterId" WITH =, tsrange("start", "end", '[)') WITH &&);
}

model Theater {
  id       String           @id @default(uuid()) @db.Uuid
  name     String  @unique
  seats    Seat[]
  shows    Show[]
  features Feature[]
}

model Seat {
  id        String @id @default(uuid()) @db.Uuid
  number    Int
  row       Int
  type      SeatType @default(NORMAL)
  theaterId String   @db.Uuid
  theater   Theater  @relation(fields: [theaterId], references: [id], onDelete: Cascade)
  tickets   Ticket[]

  @@unique([number, theaterId])
}

model Feature {
  id       String @id @default(uuid()) @db.Uuid
  name     String    @unique
  theaters Theater[]
}

enum SeatType {
  NORMAL
  DELUXE
  REMOVABLE
}

model User {
  id         String @id @default(uuid()) @db.Uuid
  username   String @unique
  hash       String
  customer   Customer?
  roles      Role[] @default([USER])
}

enum Role {
  USER
  ADMIN
}
